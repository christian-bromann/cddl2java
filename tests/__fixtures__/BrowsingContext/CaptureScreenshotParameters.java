/**
 * !!! PLEASE DO NOT EDIT THIS FILE !!!
 *
 * This source file, even though checked in, is auto-generated based on the
 * current development within the WebDriver Bidi spec. Any changes to this
 * file need to come from the specification.
 */

package org.openqa.selenium.bidirectional.browsingcontext;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import org.openqa.selenium.bidirectional.*;

/**
 * Auto-generated class for WebDriver BiDi protocol
 * Represents parameters for browsingContext.CaptureScreenshotParameters command
 */
public class CaptureScreenshotParameters {

    /**
     * Creates a new CaptureScreenshotParameters instance
     */
    public CaptureScreenshotParameters(BrowsingContext.BrowsingContext context, Object origin, BrowsingContext.ImageFormat format, BrowsingContext.ClipRectangle clip) {
        this.context = context;
        this.origin = origin;
        this.format = format;
        this.clip = clip;
        
    }

    private final BrowsingContext.BrowsingContext context;

    /**
     * Gets the context property
     * @return BrowsingContext.BrowsingContext value
     */
    public BrowsingContext.BrowsingContext getContext() {
        return this.context;
    }

    private final Object origin;

    /**
     * Gets the origin property
     * @return Object value
     */
    public Object getOrigin() {
        return this.origin;
    }

    private final BrowsingContext.ImageFormat format;

    /**
     * Gets the format property
     * @return BrowsingContext.ImageFormat value
     */
    public BrowsingContext.ImageFormat getFormat() {
        return this.format;
    }

    private final BrowsingContext.ClipRectangle clip;

    /**
     * Gets the clip property
     * @return BrowsingContext.ClipRectangle value
     */
    public BrowsingContext.ClipRectangle getClip() {
        return this.clip;
    }

    /**
     * Converts this object to a map for use with BiDi protocol
     * @return Map representation of this object
     */
    public Map<String, Object> asMap() {
        Map<String, Object> toReturn = new HashMap<>();
        toReturn.put("context", this.context);
        toReturn.put("origin", this.origin);
        toReturn.put("format", this.format);
        toReturn.put("clip", this.clip);
        return toReturn;
    }

}